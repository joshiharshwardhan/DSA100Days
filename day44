class Solution {
public:
    TreeNode*solve(vector<int>&inorder,vector<int>&postorder,int&postindex,int instart,int inend,map<int,int>&mpp)
    {
        if(instart>inend||postindex<0)
        {
            return NULL;
        }
        int val = postorder[postindex];
        TreeNode*root = new TreeNode(val);
        int position = mpp[val];
        postindex--;
        root->right = solve(inorder,postorder,postindex,position+1,inend,mpp);
        root->left = solve(inorder,postorder,postindex,instart,position-1,mpp);
       
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        map<int,int>mpp;
        int n = inorder.size();
        for(int i=0;i<n;i++)
        {
            mpp[inorder[i]] = i;
        }
        int postindex = n-1;
        TreeNode*ans = solve(inorder,postorder,postindex,0,n-1,mpp);
        return ans;
    }
};

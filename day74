#include <bits/stdc++.h> 
// MEMOIZATION 
// int f(int row,int col,vector<vector<int>>&grid,vector<vector<int>>&dp)
// {
//     if(row==0&&col==0)
//     {
//         return grid[row][col];
//     }
//     if(row<0||col<0)
//     {
//         return 0;
//     }
//     if(dp[row][col]!=-1)
//     {
//         return dp[row][col];
//     }
//     int left = INT_MAX;
//     int up = INT_MAX;
//     if(col>0)
//     {
//         left = grid[row][col]+f(row,col-1,grid,dp);
//     }
    
    
    
//     if(row>0)
//     {
//         up = grid[row][col]+f(row-1,col,grid,dp);
//     }
    
    
    
    

    
//     return dp[row][col] = min(left,up);
// }
int minSumPath(vector<vector<int>> &grid) {
    // Write your code here.
    // TABULATION 
    int n = grid.size();
    int m = grid[0].size();
    vector<vector<int>>dp(n,vector<int>(m,-1));
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(i==0&&j==0)
            {
                dp[i][j] = grid[i][j];
            }
            else{
                int left= INT_MAX;
                int up = INT_MAX;
                if(i>0)
                {
                    up = dp[i-1][j]+grid[i][j];
                }
                if(j>0)
                {
                    left = dp[i][j-1]+grid[i][j];
                }
                dp[i][j] = min(left,up);
            }
            
            
        }
    }
    return dp[n-1][m-1];

}

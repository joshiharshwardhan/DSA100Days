class Solution {
public:
    bool isPossible(int color[], int node, bool graph[101][101], int col, int n) {
        for (int i = 0; i < n; i++) {
            if (i != node && graph[i][node] == 1 && color[i] == col) {
                return false;
            }
        }
        return true;
    }

    bool solve(bool graph[101][101], int color[], int m, int n, int node) {
        if (node == n) {
            return true;
        }
        for (int i = 1; i <= m; i++) {
            if (isPossible(color, node, graph, i, n)) {
                color[node] = i;
                if (solve(graph, color, m, n, node + 1)) {
                    return true;
                }
                color[node] = 0;
            }
        }
        return false;
    }

    bool graphColoring(bool graph[101][101], int m, int n) {
        int color[n] = {0};
        if (solve(graph, color, m, n, 0)) {
            return true;
        } 
        else{
            return false;
        }
    }
};
 

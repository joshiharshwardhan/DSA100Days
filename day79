bool f(int ind,int k,vector<int>&arr,int n,vector<vector<int>>&dp)
{
	if(k==0)
	{
		return 1;
	}
	if(ind==0)
	{
		if(arr[0]==k)
		{
			return 1;
		}
		else{
			return 0;
		}

	}
	if(k<0)
	{
		return 0;
	}
	if(dp[ind][k]!=-1)
	{
		return dp[ind][k];
	}
	int pick = f(ind-1, k-arr[ind], arr, n, dp);
	
	int nopick = f(ind-1, k, arr, n,dp);
	if(pick==1)
	{
		return dp[ind][k] = pick;
	}
	else{
		return dp[ind][k] = nopick;
	}
}
bool canPartition(vector<int> &arr, int n)
{
	// Write your code here.
	int sum  = 0;
	if(n==1)
	{
		return false;
	}
	for(int i=0;i<n;i++)
	{
		sum+=arr[i];
	}
	if(sum%2==1)
	{
		return false;
	}
	
	else{
		int k = sum/2;
		vector<vector<int>>dp(n,vector<int>(k+1,-1));
		int ind = n-1;
		if(f(ind,k,arr,n,dp)){
			return true;
		}
		else{
			return false;
		}
	}
	
}

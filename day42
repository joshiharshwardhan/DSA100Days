void traverseleft(TreeNode<int>*root,vector<int>&ans)
{
    if(root==NULL||(root->left==NULL&&root->right==NULL))
    {
        return;
    }
   
    ans.push_back(root->data);
    if(root->left)
    {
        traverseleft(root->left,ans);
    }
    else
    {
        traverseleft(root->right,ans);
    }

}
void traverseleafnodes(TreeNode<int>*root,vector<int>&ans)
{
    if(root==NULL)
    {
        return ;
    }
    if(root->left==NULL&&root->right==NULL)
    {
        ans.push_back(root->data);
        return ;
    }
    
    
    traverseleafnodes(root->left,ans);
    
    
    
    traverseleafnodes(root->right,ans);
    
    
}
void traverseright(TreeNode<int>*root,vector<int>&ans)
{
    if(root==NULL||(root->left==NULL&&root->right==NULL))
    {
        return ;
    }
    
    if(root->right)
    {
        traverseright(root->right,ans);
    }
    else
    {
        traverseright(root->left,ans);
    }
    ans.push_back(root->data);
}
vector<int> traverseBoundary(TreeNode<int> *root)
{
	// Write your code here.
    vector<int>ans;
    ans.push_back(root->data);
    traverseleft(root->left,ans);
    traverseleafnodes(root->left,ans);
    traverseleafnodes(root->right,ans);
    traverseright(root->right,ans);
    return ans;
     
}

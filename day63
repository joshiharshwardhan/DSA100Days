class Solution {
public:
    bool ispossible(int row,int col,vector<string>&board,int n)
    {
        int duprow = row;
        int dupcol = col;
        while(row>=0&&col>=0) // for diagonally upwards
        {
            if(board[row][col]=='Q')
            {
                return false;
            }
            row--;
            col--;
        }
        row = duprow;
        col = dupcol;
        while(col>=0) // for left 
        {
            if(board[row][col]=='Q')
            {
                return false;
            }
            col--;
        }
        col = dupcol;
        row = duprow;
        while(row<n&&col>=0) // for diagonally downwards
        {
            if(board[row][col]=='Q')
            {
                return false;
            }
            row++;
            col--;
        }
        return true;
    }
    void solve(int n,int col,string inp,vector<string>board,vector<vector<string>>&ans)
    {
        if(col>=n)
        {
            ans.push_back(board);
            return;
        }
        for(int row =0;row<n;row++)
        {
            if(ispossible(row,col,board,n))
            {
                board[row][col] = 'Q';
                solve(n,col+1,inp,board,ans);
                board[row][col] = '.';
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>ans;
        vector<string>board(n);
        string inp(n,'.');
        for(int i=0;i<n;i++)
        {
            board[i] = inp;
        }
        int col = 0;
        solve(n,col,inp,board,ans);
        return ans;
    }
};

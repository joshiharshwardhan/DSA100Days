// Bottom view of the binary tree
class Solution
{
    private:
    void solve(Node*root,vector<int>&ans)
    {
        if(root==NULL)
        {
            return ;
        }
        map<int,int>mpp;
        queue<pair<Node*,int>>q;
        q.push({root,0});
        while(!q.empty())
        {
            Node*temp = q.front().first;
            int line = q.front().second;
            
            
            mpp[line] = temp->data;
            
            q.pop();
            if(temp->left)
            {
                q.push({temp->left,line-1});
            }
            if(temp->right)
            {
                q.push({temp->right,line+1});
            }
        }
        for(auto it:mpp)
        {
            ans.push_back(it.second);
        }
        
    }
    public:
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    vector<int> topView(Node *root)
    {
        //Your code here
        vector<int>ans;
        solve(root,ans);
        return ans;
        
    }

};

// Top view of binary tree 
class Solution
{
    private:
    void solve(Node*root,vector<int>&ans)
    {
        if(root==NULL)
        {
            return ;
        }
        map<int,int>mpp;
        queue<pair<Node*,int>>q;
        q.push({root,0});
        while(!q.empty())
        {
            Node*temp = q.front().first;
            int line = q.front().second;
            
            if(mpp.find(line)==mpp.end())
            {
                mpp[line] = temp->data;
            }
            q.pop();
            if(temp->left)
            {
                q.push({temp->left,line-1});
            }
            if(temp->right)
            {
                q.push({temp->right,line+1});
            }
        }
        for(auto it:mpp)
        {
            ans.push_back(it.second);
        }
        
    }
    public:
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    vector<int> topView(Node *root)
    {
        //Your code here
        vector<int>ans;
        solve(root,ans);
        return ans;
        
    }

};
